import xlrd
from datetime import datetime
from util.user import User
from util.logger import CLogger
from util.parser import Parser as p

logger = CLogger().get_logger()


class Controller:
    '''
        Interface to interact with utility classes to extract user
        data from XLS file generated by TimeTrax timeclocks.
    '''

    def __init__(self, log_level):
        self.log_level = log_level

    def extract_data(self, file_path) -> []:
        '''
            Method that takes in the path to file and returns
            a list of User objects from the file.
        '''

        workbook = xlrd.open_workbook(file_path)

        users = []

        for i in range(0, workbook.nsheets):
            temp_hrs = []
            dates = []
            hrs = []
            datesNhrs = []

            currentSheet = workbook.sheet_by_index(i)

            date = self.__get_date(currentSheet)

            name = self.__get_name(currentSheet)

            group = self.__get_group(currentSheet)

            comm_date = self.__get_comm_date(currentSheet)

            pi_comm = self.__get_pi_comm(currentSheet)

            po_comm = self.__get_po_comm(currentSheet)

            sp_comm = self.__get_sp_comm(currentSheet)

            comments = [comm_date, pi_comm, po_comm, sp_comm]

            dailyHrsCol = self.__get_dailyHrsCol(currentSheet)

            temp_hrs.append(p.xlsParser(sheet=currentSheet,
                                        mincolx=dailyHrsCol[1],
                                        minrowy=dailyHrsCol[0]+1,
                                        maxcolx=dailyHrsCol[1]+1,
                                        maxrowy=currentSheet.nrows,
                                        target="[0-9]*:[0-9]*",
                                        xbuff=None,
                                        ybuff=None)
                            )

            for i in range(0, len(temp_hrs[0]), 2):
                hrs.append(p.hrsFormatter(temp_hrs[0][i]))

            for i in range(1, len(temp_hrs[0]), 2):
                currDate = [temp_hrs[0][i][0], 1]
                dates.append(
                    f"{currentSheet.cell_value(rowx=currDate[0], colx=currDate[1])}")

            for i in range(len(dates)):
                datesNhrs.append([dates[i], hrs[i]])

            curr_user = User(name=name[0], group=group[0],
                             start_date=date, report=datesNhrs,
                             comments=comments, log_level=self.log_level)

            if self.log_level == "DEBUG":
                curr_user._print_user_info()

            users.append(curr_user)

        return users

    def __get_date(self, sheet) -> datetime:
        date = p.xlsParser(sheet=sheet,
                           mincolx=0, minrowy=0,
                           maxcolx=25, maxrowy=25,
                           target="[0-9].(AM|PM)",
                           xbuff=None,
                           ybuff=None)
        date = datetime.strptime(date[0].split(" ", 1)[0],
                                 "%m/%d/%Y").date()

        return date

    def __get_name(self, sheet) -> [str, [int, int]]:
        name = p.xlsParser(sheet=sheet,
                           mincolx=0, minrowy=0,
                           maxcolx=35, maxrowy=35,
                           target="User Name:",
                           xbuff=2,
                           ybuff=None)
        return name

    def __get_group(self, sheet) -> [str, [int, int]]:
        group = p.xlsParser(sheet=sheet,
                            mincolx=0, minrowy=0,
                            maxcolx=3, maxrowy=35,
                            target="Employee Group",
                            xbuff=8,
                            ybuff=None)
        return group

    def __get_comm_date(self, sheet) -> [datetime, [int, int]]:
        comm_date = p.xlsParser(sheet=sheet,
                                mincolx=1, minrowy=sheet.nrows-2,
                                maxcolx=2,
                                maxrowy=sheet.nrows-1,
                                target="DATE",
                                xbuff=None,
                                ybuff=1)
        return comm_date

    def __get_pi_comm(self, sheet) -> [str, [int, int]]:
        pi_comm = p.xlsParser(sheet=sheet,
                              mincolx=1, minrowy=sheet.nrows-2,
                              maxcolx=sheet.ncols,
                              maxrowy=sheet.nrows-1,
                              target="IN PUNCH COMMENT",
                              xbuff=None,
                              ybuff=1)
        return pi_comm

    def __get_po_comm(self, sheet) -> [str, [int, int]]:
        po_comm = p.xlsParser(sheet=sheet,
                              mincolx=1, minrowy=sheet.nrows-2,
                              maxcolx=sheet.ncols,
                              maxrowy=sheet.nrows-1,
                              target="OUT PUNCH COMMENT",
                              xbuff=None,
                              ybuff=1)
        return po_comm

    def __get_sp_comm(self, sheet) -> [str, [int, int]]:
        sp_comm = p.xlsParser(sheet=sheet,
                              mincolx=1, minrowy=sheet.nrows-2,
                              maxcolx=sheet.ncols,
                              maxrowy=sheet.nrows-1,
                              target="SPECIAL PAY COMMENT",
                              xbuff=None,
                              ybuff=1)
        return sp_comm

    def __get_dailyHrsCol(self, sheet) -> [str, ...]:
        dailyHrsCol = p.xlsParser(sheet=sheet,
                                  mincolx=0, minrowy=0,
                                  maxcolx=sheet.ncols,
                                  maxrowy=sheet.nrows,
                                  target="DAILY",
                                  xbuff=None,
                                  ybuff=None)[1]
        return dailyHrsCol
