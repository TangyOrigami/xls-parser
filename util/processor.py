from datetime import datetime

import xlrd

from structs.result import Result
from structs.comments import Comments
from structs.employee import Employee
from structs.pay_period import PayPeriod
from util.logger import CLogger
from util.parser import Parser as p
from util.work_entry_worker import WorkEntryWorker

log = CLogger().get_logger()

ERROR = Result.ERROR
SUCCESS = Result.SUCCESS


class Processor:
    """
    Interface to interact with utility classes to extract user
    data from XLS file generated by TimeTrax timeclocks.
    """

    async def extract_data(self, file_path: str, BUILD: str = "DEBUG") -> Result:
        """
        Method that takes in the path to file and returns
        a list of User objects from the file.
        """

        workbook = xlrd.open_workbook(file_path)

        for i in range(0, workbook.nsheets):
            temp_hrs = []
            dates = []
            hrs = []
            report = []

            currentSheet = workbook.sheet_by_index(i)

            date = self.__get_date(currentSheet, BUILD)
            name = self.__get_name(currentSheet, BUILD)
            group = self.__get_group(currentSheet, BUILD)
            comm_date = self.__get_comm_date(currentSheet, BUILD)
            pi_comm = self.__get_pi_comm(currentSheet, BUILD)
            po_comm = self.__get_po_comm(currentSheet, BUILD)
            sp_comm = self.__get_sp_comm(currentSheet, BUILD)
            dailyHrsCol = self.__get_daily_hrs_col(currentSheet, BUILD)

            temp_hrs.append(
                p.xls_parser(
                    sheet=currentSheet,
                    mincolx=dailyHrsCol[1],
                    minrowy=dailyHrsCol[0] + 1,
                    maxcolx=dailyHrsCol[1] + 1,
                    maxrowy=currentSheet.nrows,
                    target="[0-9]*:[0-9]*",
                    xbuff=None,
                    ybuff=None,
                    BUILD=BUILD,
                )
            )

            for i in range(0, len(temp_hrs[0]), 2):
                hrs.append(p.hrs_formatter(temp_hrs[0][i], BUILD))

            for i in range(1, len(temp_hrs[0]), 2):
                currDate = [temp_hrs[0][i][0], 1]
                dates.append(
                    f"{currentSheet.cell_value(rowx=currDate[0], colx=currDate[1])}"
                )

            for i in range(len(dates)):
                report.append([dates[i], hrs[i]])

            c_user = await Employee.create(name=name, group=group[0])
            c_pay_period = await PayPeriod.create(
                employee_id=c_user.employee_id,
                date=date
            )

            worker = WorkEntryWorker(
                pay_period_id=c_pay_period.pay_period_id,
                report=report,
                start_date=date,
                build=BUILD
            )

            await worker.extract_work_entries()

            if len(pi_comm) >= 2 or len(po_comm) >= 2 or len(sp_comm) >= 2:
                await Comments.create(
                    pay_period_id=c_pay_period.pay_period_id,
                    employee_id=c_user.employee_id,
                    date=comm_date[0],
                    punch_in_comment=pi_comm[0],
                    punch_out_comment=po_comm[0],
                    special_pay_comment=sp_comm[0],
                )

        return SUCCESS

    def __get_date(self, sheet, BUILD) -> datetime:
        date = p.xls_parser(
            sheet=sheet,
            mincolx=0,
            minrowy=0,
            maxcolx=25,
            maxrowy=25,
            target="[0-9].(AM|PM)",
            xbuff=None,
            ybuff=None,
            BUILD=BUILD,
        )

        date = datetime.strptime(date[0].split(" ", 1)[0], "%m/%d/%Y").date()

        return date

    def __get_name(self, sheet, BUILD) -> [str, [int, int]]:
        name = p.xls_parser(
            sheet=sheet,
            mincolx=0,
            minrowy=0,
            maxcolx=35,
            maxrowy=35,
            target="User Name:",
            xbuff=2,
            ybuff=None,
            BUILD=BUILD,
        )

        split_name = name[0].split(" ")
        sanitized_name = [i.replace(",", "") for i in split_name]
        name = {"First Name": "", "Middle Name": "", "Last Name": []}

        for i in reversed(sanitized_name):
            if len(i) == 1:
                name.update({"Middle Name": i})
            elif name["First Name"] == "":
                name.update({"First Name": i})
            else:
                name["Last Name"].append(i)
                name["Last Name"].reverse()

        return name

    def __get_group(self, sheet, BUILD) -> [str, [int, int]]:
        group = p.xls_parser(
            sheet=sheet,
            mincolx=0,
            minrowy=0,
            maxcolx=3,
            maxrowy=35,
            target="Employee Group",
            xbuff=8,
            ybuff=None,
            BUILD=BUILD,
        )

        return group

    def __get_comm_date(self, sheet, BUILD) -> [datetime, [int, int]]:
        comm_date = p.xls_parser(
            sheet=sheet,
            mincolx=1,
            minrowy=sheet.nrows - 2,
            maxcolx=2,
            maxrowy=sheet.nrows - 1,
            target="DATE",
            xbuff=None,
            ybuff=1,
            BUILD=BUILD,
        )

        return comm_date

    def __get_pi_comm(self, sheet, BUILD) -> str:
        pi_comm = p.xls_parser(
            sheet=sheet,
            mincolx=1,
            minrowy=sheet.nrows - 2,
            maxcolx=sheet.ncols,
            maxrowy=sheet.nrows - 1,
            target="IN PUNCH COMMENT",
            xbuff=None,
            ybuff=1,
            BUILD=BUILD,
        )

        return pi_comm

    def __get_po_comm(self, sheet, BUILD) -> str:
        po_comm = p.xls_parser(
            sheet=sheet,
            mincolx=1,
            minrowy=sheet.nrows - 2,
            maxcolx=sheet.ncols,
            maxrowy=sheet.nrows - 1,
            target="OUT PUNCH COMMENT",
            xbuff=None,
            ybuff=1,
            BUILD=BUILD,
        )

        return po_comm

    def __get_sp_comm(self, sheet, BUILD) -> str:
        sp_comm = p.xls_parser(
            sheet=sheet,
            mincolx=1,
            minrowy=sheet.nrows - 2,
            maxcolx=sheet.ncols,
            maxrowy=sheet.nrows - 1,
            target="SPECIAL PAY COMMENT",
            xbuff=None,
            ybuff=1,
            BUILD=BUILD,
        )

        return sp_comm

    def __get_daily_hrs_col(self, sheet, BUILD) -> [str, ...]:
        dailyHrsCol = p.xls_parser(
            sheet=sheet,
            mincolx=0,
            minrowy=0,
            maxcolx=sheet.ncols,
            maxrowy=sheet.nrows,
            target="DAILY",
            xbuff=None,
            ybuff=None,
            BUILD=BUILD,
        )[1]

        return dailyHrsCol
